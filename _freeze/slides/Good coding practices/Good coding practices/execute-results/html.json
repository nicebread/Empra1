{
  "hash": "9141e29ca2190b1a2ae5ba65aaae4c61",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"How to minimize mistakes\"\nsubtitle: \"Good coding practices\"\nauthor:\n  - name: Felix Schönbrodt\n    orcid: 0000-0002-8282-3910\n    email: felix.schoenbrodt@psy.lmu.de\n    affiliations: Ludwig-Maximilians-Universität München\ndate: 2024-04-27\nfooter: \"Forschungsorientierte Praktikum I – Empirisches Praktikum, Ludwig-Maximilians-Universität München\"\nformat: \n  nicetheme-revealjs: \n    output-ext: slide.html\n    transition: slide    \n  html: default\nrevealjs-plugins:\n  - attribution\n---\n\n\n<!-- Dauer: 25 min. -->\n\n## \n\n<div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center; height: 100vh; font-family: 'Segoe', sans-serif;\">\n  <div style=\"font-size: 48px; font-weight: bold;\">  <!-- This matches a bold title -->\n    How to minimize mistakes\n  </div>\n  <div style=\"font-size: 32px; color: gray; margin-top: 20px;\">  <!-- Smaller, lighter for subtitle -->\n    Good coding practices\n  </div>\n</div>\n\n\n<div style=\"position: absolute; top: 0; right: 0; z-index: 10;\">\n    \n![](img/Research_Transparency.jpg){width=130px}\n![](img/OSC_LMU_Open_Science_Center.jpg){width=250px}\n    \n</div>\n\n<div style=\"position: absolute; top: 0; left: 0; z-index: 10;\">\n    \n![](img/LMU.jpg){width=250px}\n    \n</div>\n\n<div style=\"position: absolute; bottom: 0; right: 0; z-index: 10;font-size: 20px;\">\n**Felix Schönbrodt & Caroline Zygar-Hoffmann** <br>\nLudwig-Maximilians-Universität <br>\nMünchen\n</div>\n\n\n<div style=\"position: absolute; bottom: 0; left: 0; z-index: 10;font-size: 14px\">\n\n::: columns\n::: {.column width=\"70%\"}\n\nThis presentation is licensed under a [CC-BY 4.0](https://creativecommons.org/licenses/by/4.0/) license. <br> You may copy, distribute, and use the slides in your own work, <br> \nas long as you give attribution to the original author at each slide that you use.\n\n:::\n::: {.column width=\"30%\"}\n\n<div>\n![](img/Licence.jpg){width=70px}\n</div>\n:::\n:::\n</div>\n\n::: footer\nTwitter accounts: [@psycaroly](https://twitter.com/psycaroly), [@nicebread303](https://twitter.com/nicebread303)\n:::\n\n\n## The Ideal? <span style=\"padding-left: 300px;\">Reality?</span>\n\n\n::: columns\n::: {.column width=\"50%\"}\n\n- Surrounded from a flood of fake news,\n  science is one of (the last?)\n  sources of credible information.\n- Trust in science: Scientists are\n  impartial, meticulous, and check\n  their results rigorously in peer\n  review before publication\n- Although error-freeness cannot be\n  guaranteed, science provides the\n  most reliable source of\n  information, and if errors happen,\n  they soon get detected and\n  corrected.\n:::\n::: {.column width=\"50%\"}\n\n- <span style=\"border-bottom: 2px solid #89CFF0; display: inline;\">Replication/credibility crisis</span>\n- <span style=\"border-bottom: 2px solid #89CFF0; display: inline;\">Number of retractions rises\n  exponentially</span>\n- <span style=\"border-bottom: 2px solid #89CFF0; display: inline;\">Pressure to „publish or perish“\n  leads to hurried manuscript, less\n  error checking</span>\n- Reviewer overload leads to\n  superficial reviews\n- <span style=\"border-bottom: 2px solid #89CFF0; display: inline;\">***statcheck***(Nuijten et al., 2016):\n  50% of psychology papers contain</span>\n  at least one inconsistent statistic\n:::\n:::\n\n## Mistakes lurke everywhere\n\n::: {.smaller}\n- Errors in data collection software/scripts\n- Error in manual data transcription\n- Analyzing the wrong data set (e.g., an old version, a filter has been\n  unknowingly applied)\n- Coding errors\n  - Wrong group assignment (control/ experimental group)\n  - NAs coded as 99?\n- Faulty analysis software; version changes in R packages\n- Mistyping numbers when copying them from R to manuscript\n- Send the wrong file to the journal submission system\n- Asymmetry: Mistakes tend to go in the preferred direction (Gould, 1996),\n  because we check more vigorously when results (unexpectedly) go into the\n  wrong direction.\n  - See also „garden of forking paths“ (Gelman & Loken, 2013): A lot of **p**-hacking is unintentional\n:::\n\n## Mistakes lurke everywhere\n<div style=\"text-align: center;\">\n![](img/Example.jpg){ width=750px}\n</div>\n\n::: footer\nScreenshot from presentation from Katrin Auspurg & Josef Brüderl\n::: \n\n## How to prevent coding errors?\n\n<div style=\"text-align: center;\">\n![](img/Preventing_Coding_Errors.jpg){ width=550px}\n</div>\n\n::: footer\n[https://www.osnews.com/story/19266/wtfsm/](https://www.osnews.com/story/19266/wtfsm/)\n::: \n\n## Unit tests / sanity checks\n\n- <span style=\"border-bottom: 2px solid #89CFF0; display: inline;\">***Always***</span> look at the descriptive statistics (min, max,\n  NAs, mean) of <span style=\"border-bottom: 2px solid #89CFF0; display: inline;\">***every***</span> variable (also\n  transformed/computed variables)\n  - Know the scales of your variables: Is the mean plausible? Is the\n    minimum and maximum value theoretically possible and plausible?\n  - Does a scale value from multiple items have only discrete values?\n  - Do z-standardized variables really have *mean*=0 and *SD*=1?\n- Plot all variables (scatterplot, histograms)\n\n## Unit tests / sanity checks\n\n- The ***summarytools*** package\n  makes this really easy:\n\n<div style=\"position: absolute; top: 10px; right: 10px;\">\n  ![](img/Unit_Tests_1.jpg){width=300px}\n</div>\n\n\n::: columns\n::: {.column width=\"70%\"}\n\n<div style=\"margin-top: -30px;\">\n![](img/Unit_Tests_2.jpg){ width=650px}\n</div>\n\n:::\n::: {.column width=\"30%\"}\n\n::: {.smaller}\nalternatively:\n***codebook*** package\nby Ruben Arslan\n(also has RStudio plugin).\nHas some nice\nconvenience functions, e.g.\nwhen importing SPSS or\nother data files.\n:::\n:::\n:::\n\n\n## Technical reproducibility\n\n::: {.smallest}\n::: columns\n::: {.column width=\"60%\"}\n\n1. When you rely on random numbers (e.g., in\n   simulation studies): Set a seed for reproducibility\n   - Take care when doing parallel computing, this sometimes\nrequires special treatment of seeds\n2. Document exact versions of all packages/ external\n   programs at each completed stage of data analysis\n   - e.g., in R: Save the sessionInfo() of the analytical pipeline in an\n     accompanying file when you submit a paper, and for every revision\n3. Save a snapshot of the current version/state of the\n   statistical software\n   - e.g., in R: checkpoint package, packrat package, renv package\n4. The safest way: Make a docker container which\n   contains the full computational environment\n   (including OS)\n:::\n\n::: {.column width=\"40%\"}\n\n<div>\n![](img/Technical_Reproducibility.jpg){width=850px}\n</div>\n:::\n:::\n:::\n\n<div style=\"text-align: center; margin-top: -30px;\">\n![](img/Technical_Reproducibility_2.jpg){width=800px}\n</div>\n\n::: footer\nGraphic from [https://rviews.rstudio.com/2018/01/18/package-management-for-reproducible-r-code/](https://rviews.rstudio.com/2018/01/18/package-management-for-reproducible-r-code/)\n:::\n\n## Coding style\n\n- Meaningful variable names, meaningful directory\n  structure\n- Never copy and paste code\n- Never write a coding block longer than your screen\n- Literate Programming (Knuth): Computer code is for\n  humans, not just for computers.\n  \n::: footer\n[https://x.com/mcxfrank/status/1075466294797824000](https://x.com/mcxfrank/status/1075466294797824000)\n:::\n\n## File organization\n\n<br>\n\n- (The following guidelines apply to many, but not all\n  possible types of projects)\n- All files that are necessary for reproducing the results\n  should be bundled in <span style=\"border-bottom: 2px solid #89CFF0; display: inline;\">one</span> directory\n  - Including: primary unprocessed data files, scripts for data\n    preprocessing, cached intermediate data objects, scripts for\n    hypothesis testing, generated result plots, ...\n  - Goal: You zip the directory, send it to somebody, and the\n    person can reproduce the full analytical pipeline.\n- Use a consistent, self-explanatory subdirectory structure\n- Number script files in execution order (see next slide)\n\n<div style=\"position: absolute; top: 0; right: 0; z-index: 10;\">\n    \n![](img/OSC_LMU_Open_Science_Center.jpg){width=250px}\n    \n</div>\n\n## Directory organization\n\n<br>\n\n<div style=\"text-align: center;\">\n![](img/Directory_Organization.jpg){ width=700px}\n</div>\n\n<div style=\"position: absolute; top: 0; right: 0; z-index: 10;\">\n    \n![](img/OSC_LMU_Open_Science_Center.jpg){width=250px}\n    \n</div>\n\n## Subdirectory organization\n\n<div style=\"text-align: center; margin-top: +30px;\">\n::: {.smaller}\n- (Again, this is one possible organization scheme)\n- **/raw_data**: Contains all raw primary data files, as you received them (or exported them\n  from the experimental software), without any manual preprocessing. <br>\n  Primary data files are sacrosanct – set them to read-only, never change anything in them. <br>\n  Any transformation, data exclusions, or error corrections must be done in scripts in order to\n  be reproducible.\n- **/processed_data**: Stores intermediate data objects. For example, after you did all your\n  outlier exclusions, data transformations, etc., store a file „data_cleaned.csv“ in /cache. If\n  you refer to this data file in subsequent scripts, you do not have to run the preprocessing\n  script every time.\n  All files in **/processed_data** can be safely deleted, as they can be reconstructed by running\n  all script files in the correct order.\n- **/doc**: Documents (such as PDFs, manuals, etc.) related to the project.\n- **/plots**: Store result plots that you created in your scripts.\n- **/export**: If you export (sub)data sets or summaries for dissemination, store them here.\n- **/archive**: Old scripts and other files which are not used for your final analytical pipeline, but\n  which you want to keep for some reasons.\n:::\n</div>\n\n<div style=\"position: absolute; top: 0; right: 0; z-index: 10;\">\n    \n![](img/OSC_LMU_Open_Science_Center.jpg){width=250px}\n    \n</div>\n\n## Variable name conventions\n<br>\n\n::: columns\n::: {.column width=\"70%\"}\n\n- snake_case, camelCase, dot.style,\n  sTUdLy cAPs?\n  - Do not use dots in variables (clashes\n    with some functions)\n  - Some consensus that snake_case is\n    the best choice, but respect languagespecific coding conventions\n  - Be consistent!\n- Prefer short variable names, but:<br>\n  understandability >> brevity\n:::\n\n::: {.column width=\"30%\"}\n\n<div>\n![](img/Variable_Name_Convention_1.jpg){width=350px}\n</div>\n\n<div>\n![](img/Variable_Name_Convention_2.jpg){width=350px}\n</div>\n:::\n:::\n\n<div style=\"position: absolute; top: 0; right: 0; z-index: 10;\">\n    \n![](img/OSC_LMU_Open_Science_Center.jpg){width=250px}\n    \n</div>\n\n## Variable name conventions\n\n::: {.smaller}\n- Before: Inconsistent mixture of naming styles\n\n<div style=\"margin-top: -60px;\">\n![](img/Table_1.jpg){width=750px}\n</div>\n\n\n- After: Consistent naming style\n\n<div style=\"margin-top: -60px;\">\n![](img/Table_2.jpg){width=750px}\n</div>\n\n:::\n\n<div style=\"position: absolute; top: 0; right: 0; z-index: 10;\">\n    \n![](img/OSC_LMU_Open_Science_Center.jpg){width=250px}\n    \n</div>\n\n## Code commenting\n\n<div style=\"margin-top: +50px;\">\n::: {.smallest}\n::: columns\n::: {.column width=\"50%\"}\n\n- At the start of each script file: Author,\n  license, purpose of the file.\n- Load add-on packages all at once at the\n  beginning of the file\n- Rule of thumb: At least\n  1 comment per 3 lines of code\n- Link code comments to paper structure\n  - „Table 3: Descriptives of...“\n  - „Hypothesis 2: Does metafilin increase\n    [...]?“\n- Bonus: Link code comments to IDs of\n  the preregistration\n- Separate chunks of code with comment\n  lines\n- If the file gets too long (e.g., > 500\n  lines), split into multiple files\n- Use English variable names and\n  comments from the beginning\n  (you don‘t want to translate everything\n  before dissemination)\n:::\n\n::: {.column width=\"50%\"}\n\n<div>\n![](img/Code_Commenting.jpg){width=450px}\n</div>\n\n:::\n:::\n:::\n</div>\n\n<div style=\"position: absolute; top: 0; right: 0; z-index: 10;\">\n    \n![](img/OSC_LMU_Open_Science_Center.jpg){width=250px}\n    \n</div>\n\n## Collaboration\n\n- Pair Programming\n  - Pair programming is an agile software development technique in\n    which two programmers work together at one workstation. One,\n    the ***driver***, writes code while the other, the ***observer*** or ***navigator***,\n    reviews each line of code as it is typed in. The two programmers\n    switch roles frequently. ([Wikipedia](https://en.wikipedia.org/wiki/Pair_programming))\n- Golden route: Independent implementation\n\n## References\n\n- Bishop, D. V. M. (2018). Fallibility in Science: Responding to Errors in\n  the Work of Oneself and Others. Advances in Methods and Practices\n  in Psychological Science, 1(3), 432–438.\n  [http://doi.org/10.1177/2515245918776632](http://doi.org/10.1177/2515245918776632)\n- Rouder, J., Haaf, J. M., & Snyder, H. K. (2018, March 25). Minimizing\n  Mistakes In Psychological Science.    [https://doi.org/10.31234/osf.io/gxcy5](https://doi.org/10.31234/osf.io/gxcy5)\n- Martin, R. (2008). Clean Code: A Handbook of Agile Software\n  Craftsmanship (1st ed.). Upper Saddle River, NJ: Prentice Hall.\n- Karthik Ram: How To Make Your Data Analysis Notebooks More\n  Reproducible\n  - [https://github.com/karthik/rstudio2019](https://github.com/karthik/rstudio2019)\n  - [https://inundata.org/talks/rstd19/#/](https://inundata.org/talks/rstd19/#/)\n\n\n<!-- Footer insert below -->\n\n\n# End\n\n## Contact\n\n<script src=\"https://kit.fontawesome.com/9fb269b0d2.js\" crossorigin=\"anonymous\"></script>\n\n<ul class=\"fa-ul\" style=\"color:black; list-style:none;\">\n\n<li><i class=\"fa-brands fa-li fa-mastodon\"></i> <a href=\"https://scicomm.xyz/@nicebread\" target=\"_blank\" style=\"color:black; border-bottom:none;\">@nicebread@scicomm.xyz</a></li>\n\n<li><i class=\"fa-li fa fa-envelope-o\"></i> <a style=\"unicode-bidi:bidi-override; direction: rtl; color:black\" href=\"javascript:window.location.href = 'mailto:' + ['felix.schoenbrodt','psy.lmu.de'].join('@')\">ed.uml.ysp@tdorbneohcs.xilef</a></li>\n\n<li><i class=\"fa-li fa-solid fa-globe\"></i> <a href=\"https://www.nicebread.de\" target=\"_blank\" style=\"color:black; border-bottom:none;\">https://www.nicebread.de</a></li>\n\n\n<li><i class=\"fa-li fa fa-github\" aria-hidden=\"true\"></i> <a href=\"https://github.com/nicebread\" target=\"_blank\" style=\"color:black; border-bottom:none;\">https://github.com/nicebread</a></li>\n</ul>\n\n<small style=\"text-align:left;\">\n[![CC-BY-SA 4.0][cc-by-sa-image]][cc-by-sa]\n\n[cc-by-sa]: http://creativecommons.org/licenses/by-sa/4.0/\n[cc-by-sa-image]: https://licensebuttons.net/l/by-sa/4.0/88x31.png\n[cc-by-sa-shield]: https://img.shields.io/badge/License-CC%20BY%20SA4.0-lightgrey.svg\n</small>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}